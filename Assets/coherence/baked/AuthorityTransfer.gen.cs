// Copyright (c) coherence ApS.
// See the license file in the project root for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using UnityEngine;
	using Unity.Collections;
	using Unity.Mathematics;
	using Coherence.Entity;

	public struct AuthorityTransfer : IEntityCommand
	{
		public int participant;
		public int authorityMode;

		public MessageTarget Routing => MessageTarget.All;
		public uint GetComponentType() => Definition.InternalAuthorityTransfer;

		public AuthorityTransfer
		(
			int dataparticipant,
			int dataauthorityMode
		)
		{
			participant = dataparticipant;
			authorityMode = dataauthorityMode;
		}

		public static void Serialize(AuthorityTransfer commandData, IOutProtocolBitStream bitStream)
		{
			bitStream.WriteIntegerRange(commandData.participant, 15, -9999);
			bitStream.WriteIntegerRange(commandData.authorityMode, 2, 0);
		}

		public static AuthorityTransfer Deserialize(IInProtocolBitStream bitStream)
		{
			var dataparticipant = bitStream.ReadIntegerRange(15, -9999);
			var dataauthorityMode = bitStream.ReadIntegerRange(2, 0);

			return new AuthorityTransfer
			(
				dataparticipant,
				dataauthorityMode
			){};
		}
	}
}
